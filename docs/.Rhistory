anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], de_tbl[[var_name]])
rnk[is.na(rnk)] <- 0
print(rnk[1:10])
print(lipid_lists[1:10])
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
#res <- res %>% dplyr::arrange(desc(NES))
new_edge <- apply(res, 1, function(x){
paste(unlist(x$leadingEdge), collapse = ",")
})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
#' @export lsea
lsea <- function(de_tbl, rnk_name, var_name = NULL, rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & is.null(var_name)) message("Error: Provide column name of lipid species if not using rownames")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], de_tbl[[var_name]])
rnk[is.na(rnk)] <- 0
print(rnk[1:10])
print(lipid_lists[1:10])
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
#new_edge <- apply(res, 1, function(x){
#	paste(unlist(x$leadingEdge), collapse = ",")
#})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
#' @export lsea
lsea <- function(de_tbl, rnk_name, var_name = NULL, rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & is.null(var_name)) message("Error: Provide column name of lipid species if not using rownames")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], de_tbl[[var_name]])
rnk[is.na(rnk)] <- 0
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
#new_edge <- apply(res, 1, function(x){
#	paste(unlist(x$leadingEdge), collapse = ",")
#})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
#' @export lsea
lsea <- function(de_tbl, rnk_name, var_name = "Species", rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & !(var_name %in% colnames(de_tbl))) message("Error: Provide valid column name of lipid species names")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], de_tbl[[var_name]])
rnk[is.na(rnk)] <- 0
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
#new_edge <- apply(res, 1, function(x){
#	paste(unlist(x$leadingEdge), collapse = ",")
#})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
lsea <- function(de_tbl, rnk_name, var_name = "Species", rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & !(var_name %in% colnames(de_tbl))) message("Error: Provide valid column name of lipid species names")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], de_tbl[[var_name]])
rnk[is.na(rnk)] <- 0
print(rnk)
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
#new_edge <- apply(res, 1, function(x){
#	paste(unlist(x$leadingEdge), collapse = ",")
#})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
head(de_tbl)
head(t_df)
lsea <- function(de_tbl, rnk_name, var_name = "Species", rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & !(var_name %in% colnames(de_tbl))) message("Error: Provide valid column name of lipid species names")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], anno_df$Species)
rnk[is.na(rnk)] <- 0
print(rnk)
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
#new_edge <- apply(res, 1, function(x){
#	paste(unlist(x$leadingEdge), collapse = ",")
#})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
lsea <- function(de_tbl, rnk_name, var_name = "Species", rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & !(var_name %in% colnames(de_tbl))) message("Error: Provide valid column name of lipid species names")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], anno_df$Species)
rnk[is.na(rnk)] <- 0
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
#new_edge <- apply(res, 1, function(x){
#	paste(unlist(x$leadingEdge), collapse = ",")
#})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
lsea <- function(de_tbl, rnk_name, var_name = "Species", rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & !(var_name %in% colnames(de_tbl))) message("Error: Provide valid column name of lipid species names")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], anno_df$Species)
rnk[is.na(rnk)] <- 0
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
new_edge <- apply(res, 1, function(x){
paste(unlist(x$leadingEdge), collapse = ",")
})
if(reformat){
res$leadingEdge <- new_edge
}
return(res)
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
head(res)
lipid_anno
res[1,]
res[2,]
res[10,]
res
lsea <- function(de_tbl, rnk_name, var_name = "Species", rownames = TRUE, nperm = 10000, minSize = 2, reformat = TRUE){
if(rownames) anno_df <- annotate.lipid.species(rownames(de_tbl))
else if(!rownames & !(var_name %in% colnames(de_tbl))) message("Error: Provide valid column name of lipid species names")
else anno_df <- annotate.lipid.species(de_tbl[[var_name]])
anno_df$Chain.new <- anno_df$Chain
anno_df$Chain.new[anno_df$Longest.Tail %in% c(12, 14, 15, 16)] <- "12-16"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(17, 18, 20)] <- "17-20"
anno_df$Chain.new[anno_df$Longest.Tail %in% c(22, 24, 26)] <- "22-26"
tail_lengths <- split(anno_df$Species, anno_df$Longest.Tail)
saturations <- split(anno_df$Species, anno_df$Saturation)
classes <- split(anno_df$Species, anno_df$Class)
chains <- split(anno_df$Species, anno_df$Chain.new)
high_res <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res1 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, sep = "_"))
high_res2 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Chain.new, sep = "_"))
high_res3 <- split(anno_df$Species, paste(anno_df$Saturation, anno_df$Chain.new, sep = "_"))
high_res4 <- split(anno_df$Species, paste(anno_df$Class, anno_df$Saturation, anno_df$Longest.Tail, sep = "_"))
lipid_lists <- c(tail_lengths, saturations, classes, chains, high_res, high_res1, high_res2, high_res3, high_res4)
rnk <- setNames(de_tbl[[rnk_name]], anno_df$Species)
rnk[is.na(rnk)] <- 0
res <- fgsea::fgseaSimple(stats = rnk, pathways = lipid_lists, nperm = nperm, minSize = minSize)
res <- res %>% dplyr::arrange(desc(NES))
new_edge <- apply(res, 1, function(x){
paste(unlist(x$leadingEdge), collapse = ",")
})
if(reformat){
res$leadingEdge <- new_edge
}
return(data.frame(res))
}
# we can use the t-statistic to rank lipid species and perform enrichment analysis using the GSEA algorithm
# note: the returned Wilcoxon statistic is not directional
res <- lsea(t_df, rnk_name = "stat")
head(res)
lipid_anno
View(lipid_anno)
devtools::install_github("nbay13/lsea")
knitr::kable(res[1:5,1:5], row.names = TRUE) magrittr::%>% kable_material(c("striped", "hover"))
knitr::kable(res[1:5,1:5], row.names = TRUE) magrittr::`%>%` kable_material(c("striped", "hover"))
knitr::kable(res[1:5,1:5], row.names = TRUE) magrittr::`%>%` knitr::kable_material(c("striped", "hover"))
knitr::kable(res[1:5,1:5], row.names = TRUE) magrittr::`%>%` knitr::kable_material(c("striped", "hover"))
knitr::kable(res[1:5,1:5], row.names = TRUE) %>% knitr::kable_material(c("striped", "hover"))
`%>%` <- magrittr::`%>%`
knitr::kable(res[1:5,1:5], row.names = TRUE) %>% knitr::kable_material(c("striped", "hover"))
knitr::kable(res[1:5,1:5], row.names = TRUE) %>% kable_material(c("striped", "hover"))
install.packages("kableExtra")
knitr::kable(res[279:284,1:5], row.names = TRUE) %>% kableExtra::kable_material(c("striped", "hover"))
rmarkdown::render("index.Rmd")
getwd()
setwd("C:/Users/Nick/Desktop/GBM/raw_data/lsea/docs/")
rmarkdown::render("index.Rmd")
rmarkdown::render("index.Rmd")
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
lsea::structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
lsea::structure.enrichment.plot()
lsea::structure.enrichment.plot
lsea::structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
structure.enrichment.plot <- function(de_tbl, anno_tbl, group_names, class = NULL, p_thresh = 0.05, color_pal = NULL, size_range = c(1, 4), facet_rows = 3){
if(is.null(color_pal)) color_pal <- gg.colors(2)
merge_df <- data.frame(cbind(de_tbl, anno_tbl[rownames(de_tbl),]))
temp <- merge_df %>% dplyr::filter(padj < p_thresh) %>% dplyr::group_by(Class, Longest.Tail, Total.DBs, dm > 0) %>% dplyr::count() %>% data.frame()
colnames(temp)[4] <- "sign"
temp$label <- temp$n
temp$label[temp$n < 2] <- ""
temp <- temp %>% tidyr::complete(Longest.Tail, Total.DBs, sign) %>% data.frame()
temp$Longest.Tail <- factor(temp$Longest.Tail)
if(is.null(class)){
gg <- ggplot(temp %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::facet_wrap(~ Class, axes = "all_x", nrow = facet_rows) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
} else {
gg <- ggplot(temp %>% filter(Class == class) %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
}
return(gg)
}
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
library(ggplot2)
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
structure.enrichment.plot <- function(de_tbl, anno_tbl, group_names, class = NULL, p_thresh = 0.05, color_pal = NULL, size_range = c(1, 4), facet_rows = 3){
if(is.null(color_pal)) color_pal <- gg.colors(2)
merge_df <- data.frame(cbind(de_tbl, anno_tbl[rownames(de_tbl),]))
temp <- merge_df %>% dplyr::filter(padj < p_thresh) %>% dplyr::group_by(Class, Longest.Tail, Total.DBs, dm > 0) %>% dplyr::count() %>% data.frame()
colnames(temp)[4] <- "sign"
temp$label <- temp$n
temp$label[temp$n < 2] <- ""
temp <- temp %>% tidyr::complete(Longest.Tail, Total.DBs, sign) %>% data.frame()
temp$Longest.Tail <- factor(temp$Longest.Tail)
if(is.null(class)){
gg <- ggplot(temp %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::facet_wrap(~ Class, axes = "all_x", nrow = facet_rows) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
} else {
gg <- ggplot(temp %>% dplyr::filter(Class == class) %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
}
return(gg)
}
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
structure.enrichment.plot <- function(de_tbl, anno_tbl, group_names, class = NULL, p_thresh = 0.05, color_pal = NULL, size_range = c(1, 4), facet_rows = 3){
if(is.null(color_pal)) color_pal <- gg.colors(2)
merge_df <- data.frame(cbind(de_tbl, anno_tbl[rownames(de_tbl),]))
temp <- merge_df %>% dplyr::filter(padj < p_thresh) %>% dplyr::group_by(Class, Longest.Tail, Total.DBs, dm > 0) %>% dplyr::count() %>% data.frame()
colnames(temp)[4] <- "sign"
temp$label <- temp$n
temp$label[temp$n < 2] <- ""
temp <- temp %>% tidyr::complete(Longest.Tail, Total.DBs, sign) %>% data.frame()
temp$Longest.Tail <- factor(temp$Longest.Tail)
if(is.null(class)){
gg <- ggplot(temp %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::facet_wrap(~ Class, axes = "all_x", nrow = facet_rows) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
} else {
gg <- ggplot(temp %>% dplyr::filter(Class == class) %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::facet_wrap(~ Class) +
ggplot2::labs(size = "# of lipid species", color = "Increase in") +
geom
}
return(gg)
}
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
structure.enrichment.plot <- function(de_tbl, anno_tbl, group_names, class = NULL, p_thresh = 0.05, color_pal = NULL, size_range = c(1, 4), facet_rows = 3){
if(is.null(color_pal)) color_pal <- gg.colors(2)
merge_df <- data.frame(cbind(de_tbl, anno_tbl[rownames(de_tbl),]))
temp <- merge_df %>% dplyr::filter(padj < p_thresh) %>% dplyr::group_by(Class, Longest.Tail, Total.DBs, dm > 0) %>% dplyr::count() %>% data.frame()
colnames(temp)[4] <- "sign"
temp$label <- temp$n
temp$label[temp$n < 2] <- ""
temp <- temp %>% tidyr::complete(Longest.Tail, Total.DBs, sign) %>% data.frame()
temp$Longest.Tail <- factor(temp$Longest.Tail)
if(is.null(class)){
gg <- ggplot(temp %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::facet_wrap(~ Class, axes = "all_x", nrow = facet_rows) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
} else {
gg <- ggplot(temp %>% dplyr::filter(Class == class) %>% na.omit(), aes(x = Longest.Tail, y = Total.DBs, size = n, color = sign, group = sign)) +
ggplot2::geom_point(position = position_dodge(width = 0.8)) +
ggplot2::geom_text(aes(label= label), position = position_dodge(width = 0.8), color = "black") +
ggplot2::theme_classic() +
ggplot2::scale_color_manual(values = color_pal, limits = c(TRUE, FALSE), labels = group_names) +
ggplot2::theme(legend.position = "top") +
ggplot2::scale_size(range = size_range) +
ggplot2::facet_wrap(~ Class) +
ggplot2::labs(size = "# of lipid species", color = "Increase in")
}
return(gg)
}
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
# for the purposes of this example we will raise the adjusted p-value threshold
# since there are not many significant differences with this simulated data
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5),
)
# or specify a Lipid Class
structure.enrichment.plot(
de_tbl = t_df, anno_tbl = lipid_anno, group_names = c("A", "B"),
p_thresh = 0.96, color_pal = c("dodgerblue", "firebrick"), size_range = c(0.25, 2.5), class = "TG"
)
devtools::install_github("nbay13/lsea")
